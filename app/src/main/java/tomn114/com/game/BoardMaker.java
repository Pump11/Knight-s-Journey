package tomn114.com.game;

import android.app.Activity;
import android.util.Log;
import android.widget.TextView;

public class BoardMaker {

    public static boolean[][][] allBoards;
    private int barrierCounter, counter = 0, runCounter = 0;
    private int barrierNum = 15;
    private int difficulty = 2;
    private int minMoves;
    private int temp;
    private int boardLength = 5;
    private int boardWidth = 5;
    private int startX, startY;
    private int endX, endY;


    public BoardMaker(){
        allBoards = new boolean[GamePanel.NUM_OF_LEVELS][boardLength][boardWidth];
        GamePanel.minTotal = 0;

        for(int i = 0;i<GamePanel.NUM_OF_LEVELS;i++){
            makeIt();
            GamePanel.storeSX[i]=startX;
            GamePanel.storeSY[i]=startY;
            GamePanel.storeEX[i]=endX;
            GamePanel.storeEY[i]=endY;
            GamePanel.minTotal+=minMoves;
        }
    }

    //Creates the board by calling makeBoard
    public void makeIt(){
        //Log.d("BoardMaker", "Making it");
        runCounter++;
        barrierCounter = barrierNum;
        //generates random barriers

        startX = (int)(Math.random()*2)+boardWidth-2;
        startY = (int)(Math.random()*2);
        endX = (int)(Math.random()*2);
        endY = (int)(Math.random()*2)+boardLength-2;

        for(int i=0; i < boardLength; i++){
            for(int j=0; j < boardWidth; j++){
                temp = (int)(Math.random()*3);
                if(temp==0 && barrierCounter!=0){
                    allBoards[counter][i][j] = false;
                    barrierCounter--;
                }
                else allBoards[counter][i][j] = true;
            }
        }
        //Lowers the difficulty if a level cannot be generated by 8000 levels
        //Prevents StackOverflow
        if(runCounter == 8000){
            runCounter = 0;
            difficulty--;
        }

        allBoards[counter][startX][startY] = true;
        allBoards[counter][endX][endY] = true;
        minMoves = BoardUtilities.checkBoard(allBoards[counter],startX, startY, endX, endY, boardLength, boardWidth);

        //If the board is not possible to complete it will re-call the method
        if(minMoves==boardLength*boardWidth || minMoves<=difficulty) makeIt();
        else{
            barrierNum = 15;
            difficulty++;
            counter++;
        }
    }
}
