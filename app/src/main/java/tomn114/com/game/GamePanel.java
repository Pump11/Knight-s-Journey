package tomn114.com.game;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;

public class GamePanel extends SurfaceView implements SurfaceHolder.Callback{

    private MainThread thread;
    public static final int WIDTH = 480;
    public static final int HEIGHT = 800;

    private boolean[][] board;

    private int barrierCounter, counter = 0, runCounter = 0; // How many times makeIt() runs
    private int barrierNum = 17;
    private int difficulty = 2;
    private int startX, startY;
    private int endX, endY;
    private int minMoves;
    private int moves;
    private int currX, currY;
    private int size = 5; // Length/width of board
    private int temp; // Wtf is this for
    private int tileSize;

    private Bitmap tile, river, castle;

    public GamePanel(Context context){
        super(context);

        //Intercept Events
        getHolder().addCallback(this);

        thread = new MainThread(getHolder(), this);

        //Focusable to handle events
        setFocusable(true);

    }


    @Override
    public void surfaceCreated(SurfaceHolder holder) {
        tileSize = getWidth() / 5 / 2;

        board = new boolean[size][size];
        tile = Bitmap.createScaledBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.tile), tileSize, tileSize, false);
        river = Bitmap.createScaledBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.river), tileSize, tileSize, false);
        castle = Bitmap.createScaledBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.castle), tileSize, tileSize, false);
        makeIt();

        thread.setRunning(true);
        thread.start();
    }
    @Override
    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {

    }
    @Override
    public void surfaceDestroyed(SurfaceHolder holder) {
        boolean retry = true;
        while(retry){
            try{
                thread.setRunning(false);
                thread.join();
            }catch(InterruptedException e){ e.printStackTrace(); }
            retry = false;
        }
    }

    @Override
    public boolean onTouchEvent(MotionEvent event){
        return false;
    }

    public void update(){

    }

    @Override
    public void draw(Canvas canvas){
        super.draw(canvas);

        final float scaleX = getWidth() / WIDTH;
        final float scaleY = getHeight() / HEIGHT;

        if(canvas != null) {
            final int savedState = canvas.save();
            canvas.scale(scaleX, scaleY);
            //Draw stuff here
            drawBoard(canvas);
            canvas.restoreToCount(savedState);
        }
    }

    public void drawBoard(Canvas canvas){
        int x = 0;
        int y = 0;

        for(int i = 0; i<board.length; i++){
            for(int j = 0; j<board.length; j++){
                if(board[i][j])
                    canvas.drawBitmap(tile, x, y, null);
                else
                    canvas.drawBitmap(river, x, y, null);

                if(i == endX && j == endY)
                    canvas.drawBitmap(castle, x, y, null);

                x += tileSize;
            }
            y += tileSize;
            x = 0;
        }
    }

    //Creates the board by calling makeBoard
    public void makeIt(){
        runCounter++;
        //Generates random start and end points
        startX = (int)(Math.random()*2)+size-2;
        startY = (int)(Math.random()*2);
        endX = (int)(Math.random()*2);
        endY = (int)(Math.random()*2)+size-2;
        barrierCounter = barrierNum;
        //generates random barriers
        for(int i=0;i<size;i++){
            for(int j=0;j<size;j++){
                temp = (int)(Math.random()*3);
                if(temp==0 && barrierCounter!=0){
                    board[i][j] = false;
                    barrierCounter--;
                }
                else board[i][j] = true;
            }
        }
        //Lowers the difficulty if a level cannot be generated by 8000 levels
        //Prevents StackOverflow
        if(runCounter == 8000){
            runCounter = 0;
            difficulty--;
        }

        board[startX][startY] = true;
        board[endX][endY] = true;
        minMoves = BoardUtilities.checkBoard(board,startX, startY, endX, endY,size);

        //If the board is not possible to complete it will re-call the method
        if(minMoves==size*size || minMoves<=difficulty)makeIt();
        else{
            difficulty++;
            counter++;
        }
    }
}
